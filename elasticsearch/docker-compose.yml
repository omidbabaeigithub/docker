version: '3.7'  

volumes:
    elasticsearch-data:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /var/sharedDir/volumes/elasticsearch/data
    kibana-config:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /var/sharedDir/volumes/kibana/config/
    # logstash-pipeline:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         o: bind
    #         device: /var/sharedDir/volumes/logstash/pipeline
    # logstash-config:
    #     driver: local
    #     driver_opts:
    #         type: none
    #         o: bind
    #         device: /var/sharedDir/volumes/logstash/config/logstash.yml

    logstash-vol:
        driver: local
        driver_opts:
            type: none
            o: bind
            device: /var/sharedDir/volumes/logstash

            

services:  
  elasticsearch:
    image: 'elasticsearch:6.5.4'
#    environment:
#        ES_JAVA_OPTS: -Xms2g -Xmx2g
    networks:
        - elk
    ports:
        - "9200:9200"
        - "9300:9300"
    command: 
        [elasticsearch, 
        -E,network.host=0.0.0.0,
        -E,discovery.zen.ping.unicast.hosts=elasticsearch,
        -E,discovery.zen.minimum_master_nodes=1,
        -E,cluster.name=es-cluster
        #-E,node.name=hostname,
        #-E,path.data=/usr/local/elasticsearch/data", 
        #-E,path.logs=/usr/local/elasticsearch/logs"
        ]
    volumes: 
        - elasticsearch-data:/usr/share/elasticsearch/data
    deploy:
        mode: replicated
        replicas: 2
#        mode: global
#        endpoint_mode: dnsrr
        endpoint_mode: vip
#        placement:
#            constraints: 
#                - node.labels.app_role == elasticsearch
                # it needs $(docker node update --label-add app_role=elasticsearch $NODE_ID)
                # - engine.labels.operatingsystem == ubuntu 14.04
                # - node.role == manager
#   nginx:
#     image: 'nginx:latest'
#     ports:
#         - '9200:9200'
#     command: |
#       /bin/bash -c "echo '
#       server {
#         listen 9200;
#         add_header X-Frame-Options "SAMEORIGIN";
#         location / {
#             proxy_pass http://elasticsearch:9200;
#             proxy_http_version 1.1;
#             proxy_set_header Connection keep-alive;
#             proxy_set_header Upgrade $$http_upgrade;
#             proxy_set_header Host $$host;
#             proxy_set_header X-Real-IP $$remote_addr;
#             proxy_cache_bypass $$http_upgrade;
#         }
#       }' | tee /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"

  kibana:
    image: kibana:6.5.4
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - elk
    deploy:
      mode: replicated
      replicas: 1
    volumes:
        - kibana-config:/usr/share/kibana/config:ro
    depends_on: 
        - elasticsearch
      
 #   healthcheck:
 #     test: wget -qO- http://localhost:5601 > /dev/null
 #     interval: 30s
 #     retries: 3

  logstash:
    image: logstash:6.5.4
    hostname: logstash
#    command: sh -c "logstash -e 'input { syslog  { type => syslog port => 10514   } gelf { } } output { stdout { codec => rubydebug } elasticsearch { hosts => [ \"elasticsearch\" ] } }'"
    ports:
#        - "10514:10514/tcp"
#        - "10514:10514/udp"
#        - "12201:12201/udp"
        - "5000:5000"
        - "9600:9600"
    networks:
      - elk
    volumes:
#        - logstash-config:/usr/share/logstash/config/logstash.yml:ro
#        - logstash-pipeline:/usr/share/logstash/pipeline:ro
        - logstash-vol:/usr/share/logstash:ro
    deploy:
      mode: replicated 
      replicas: 1
    depends_on: 
        - elasticsearch

networks:
    elk: